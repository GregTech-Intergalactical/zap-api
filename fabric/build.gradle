plugins {
    id "fabric-loom"
}

archivesBaseName = "${project.tesseract_archive_base_name}-fabric"

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        testClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.test
        }
        testServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.test
        }
    }
}

repositories {
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.mappings_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    compileOnly(project(":tesseract-common"))

    modApi(include("teamreborn:energy:${project.energy_version}")) {
        transitive = false
    }
    modImplementation(include("earth.terrarium:botarium-fabric-${project.minecraft_version}:${project.botarium_version}"))
    modImplementation(include("maven.modrinth:carbon-config:${project.carbon_config_fabric_version}"))
}

processResources {
    from project(":tesseract-common").sourceSets.main.resources
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.named('compileJava', JavaCompile) {
    source(project(":tesseract-common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(':tesseract-common').sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            from components.java
        }
    }

    repositories {
        def isCI = System.getenv("CI")
        if (isCI) {
            maven {
                url System.getenv("local_maven_url")
            }
        } else {
            mavenLocal()
        }
    }
