plugins {
    id "net.neoforged.moddev.legacyforge"
}
archivesBaseName = "${project.tesseract_archive_base_name}-forge"

neoForge {
    version = "${project.minecraft_version}-${project.forge_version}"
    def at = project(':tesseract-common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = project.minecraft_version
        mappingsVersion = project.mappings_version
    }
    runs {
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${project.mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

mixin {
    add sourceSets.main, "tesseract.refmap.json"
    config "tesseract-forge.mixins.json"
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation("org.jetbrains:annotations:26.0.1")
    modImplementation("earth.terrarium:botarium-forge-${project.minecraft_version}:${project.botarium_version}")
    compileOnly(project(":tesseract-common"))
    testImplementation('junit:junit:4.13.1')
    modImplementation("maven.modrinth:carbon-config:${project.carbon_config_forge_version}")
    jarJar("earth.terrarium:botarium-forge-${project.minecraft_version}:${project.botarium_version}")
    jarJar("maven.modrinth:carbon-config:${project.carbon_config_forge_version}")
}

tasks.named('compileJava', JavaCompile) {
    source(project(":tesseract-common").sourceSets.main.allSource)
}

processResources {
    from project(":tesseract-common").sourceSets.main.resources
    inputs.property "version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.mod_version
    }
}

sourcesJar {
    from(project(':tesseract-common').sourceSets.main.allSource)
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "GregTech-Intergalactical",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : "GregTech-Intergalactical",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "tesseract-forge.mixins.json"
        ])
    }
}

publishing {
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            from components.java
        }
    }

    repositories {
        def isCI = System.getenv("CI")
        if (isCI) {
            maven {
                url System.getenv("local_maven_url")
            }
        } else {
            mavenLocal()
        }
    }
}
